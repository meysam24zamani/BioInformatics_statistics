install.packages("Rcmdr")
install.packages("DAAG")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("RcmdrMisc", lib.loc="~/R/win-library/3.4")
detach("package:Rcmdr", unload=TRUE)
detach("package:RcmdrMisc", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.4")
detach("package:Rcmdr", unload=TRUE)
install.packages("rlang")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
detach("package:Rcmdr", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.4")
detach("package:Rcmdr", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.4")
install.packages("rlang")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("RcmdrMisc", lib.loc="~/R/win-library/3.4")
library("Hmisc", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("RcmdrMisc", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("RcmdrMisc", lib.loc="~/R/win-library/3.4")
install.packages("rlang")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("RcmdrMisc", lib.loc="~/R/win-library/3.4")
install.packages("rlang")
library("rlang", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("car", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
library("Rcmdr", lib.loc="~/R/win-library/3.4")
?rnorm
help.search(rnorm)
help.search("rnorm")
?rnorm
?rnorm
rnorm
rm(list = ls())
rm(list = ls())
ls()
load(url("http://www-eio.upc.es/~jan/data/bsg/Chromosome1 CHBPopSubset.rda")
dim(Ysub)
install.packages("genetics")
library(genetics)
Ysub[Ysub="NN"] <- NA
dim(Ysub) Ysub[1:5,5:1]
load(url("http://www-eio.upc.es/~jan/data/bsg/Chromosome1 CHBPopSubset.rda")
dim(Ysub) Ysub[1:5,5:1]
load(url("http://www-eio.upc.es/~jan/data/bsg/Chromosome1_CHBPopSubset.rda")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part")
rm(list = ls())
ls()
load(url("Chromosome1_CHBPopSubset.rda")
dim(Ysub) Ysub[1:5,5:1]
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part")
filename <- url("http://www-eio.upc.es/~jan/Data/bsg/Chromosome1_CHBPopSubset.rda")
load(filename)
#install.packages("genetics")
library(genetics)
dim(Ysub)
class(Ysub)
Ysub[1:5,1:5]
n <- nrow(Ysub)
p <- ncol(Ysub)
n
p
Ysub[Ysub=="NN"] <- NA
perc.mis <- 100*sum(is.na(Ysub))/(n*p)
perc.mis
SNP1 <- Ysub[,1]
SNP1.g <- genotype(SNP1,sep="")
summary(SNP1.g)
SNP2 <- Ysub[,2]
SNP2.g <- genotype(SNP2,sep="")
summary(SNP2.g)
SNP3 <- Ysub[,3]
SNP3.g <- genotype(SNP3,sep="")
summary(SNP3.g)
nmis <- function(x) {
y <- sum(is.na(x))
return(y)
}
nmis.per.ind <- apply(Ysub,1,nmis)
pmis.per.ind <- 100*nmis.per.ind/p
plot(1:n,pmis.per.ind,xlab="Individual",ylab="Perc. Missing")
nmis.per.snp <- apply(Ysub,2,nmis)
pmis.per.snp <- 100*nmis.per.snp/n
plot(1:p,pmis.per.snp,xlab="SNP",ylab="Perc. Missing")
sum(nmis.per.snp==n)
x <- table(SNP3)
x
sum(x)
sum(x,na.rm=TRUE)
n
nmis <- function(x) {
y <- sum(is.na(x))
return(y)
}
sum(x)
sum(x,na.rm=TRUE)
n
pC <- (2*x[1]+x[2])/(2*sum(x,na.rm=TRUE))
pT <- (2*x[3]+x[2])/(2*sum(x,na.rm=TRUE))
pC
pT
pC+pT
summary(SNP3.g)
Y2 <- Ysub[,nmis.per.snp < n]
affirst <- function(x){
x <- genotype(x,sep="")
out <- summary(x)
af1 <- out$allele.freq[1,2]
return(af1)
}
affirst(Ysub[,1])
af.first.allele <- apply(Y2,2,affirst)
hist(af.first.allele)
affirst(Ysub[,1])
af.first.allele <- apply(Y2,2,affirst)
hist(af.first.allele)
maf <- function(x){
x <- genotype(x,sep="")
out <- summary(x)
af1 <- min(out$allele.freq[,2],na.rm=TRUE)
af1[af1==1] <- 0
return(af1)
}
maf.per.snp <- apply(Y2,2,maf)
hist(maf.per.snp)
rm(list=ls())
filename <- url("http://www-eio.upc.es/~jan/Data/bsg/JapanaseSTRs.rda")
load(filename)
ls()
Japanese[1:5,1:10]
X <- Japanese[,6:ncol(Japanese)]
n <- nrow(X)/2
p <- ncol(X)
n
p
sum(X==-9)
X[X==-9] <- NA
sum(is.na(X))
class(X)
STR1 <- X[,1]
table(STR1,useNA="always")
length(unique(STR1))
n.alleles <- function(x) {
y <- length(unique(x[!is.na(x)]))
return(y)
}
n.alleles(STR1) # number of alleles
table(STR1) # allele counts
STR1 <- STR1[!is.na(STR1)]
na <- length(STR1)
na
index.1 <- seq(1,na,2)
index.2 <- seq(2,na,2)
allele.1 <- STR1[index.1]
allele.2 <- STR1[index.2]
allele.1 <- pmin(allele.1,allele.2)
allele.2 <- pmax(allele.1,allele.2)
allele.1
allele.2
individuals <- paste(allele.1,allele.2,sep="/")
g.counts <- table(individuals) # genotype counts
g.counts
unique(names(g.counts))
names(g.counts)
sum(g.counts)
length(g.counts) # number of genotypes
K <- n.alleles(STR1) # number of alleles
K
n.genotypes <- 0.5*K*(K+1)
n.genotypes
n.alleles.per.STR <- apply(X,2,n.alleles)
barplot(table(n.alleles.per.STR))
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/First_lab")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/First_lab")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
data <- read.csv("FrenchSTRs.dat", sep= " ")
View(data)
dim(data)
N <- length(unique(data$Individual))
N
p
p <- ncol(data)
p
p <- ncol(data)-1
p
data <- data[,2:(p+1)]
data <- data[,2:(p+1)]
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/First_lab")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
data <- read.csv("FrenchSTRs.dat", sep= " ")
dim(data)
N <- length(unique(data$Individual))
N
p <- ncol(data)-1
p
data <- data[,2:(p+1)]
missings <- sum(data == -9)
percentage.missings <- missings/(2*N*p) * 100
percentage.missings
### This funcion will return the number of alleles for a STR
n.alleles.str <- function(str){
n.alleles <- length(unique(str[!is.na(str)]))
return(n.alleles)
}
n.alleles <- apply(data, 2, n.alleles.str)
(mean.alleles <- mean(n.alleles))
(std.alleles <- sd(n.allels))
(std.alleles <- sd(n.alleles))
(median.alleles <- median(n.alleles))
(min.alleles <- min(n.alleles))
(max.alleles <- max(n.alleles))
table(n.alleles)
barplot(table(n.alleles), main='Number of STRs for each number of alleles', xlab="Number of alleles", ylab="
barplot(table(n.alleles), main='Number of STRs for each number of alleles', xlab="Number of alleles", ylab="Number of STRs")
### Function that computes the expected heterozygosity for a given STR
expected.hetereozygozity.str <- function(str){
counts <- as.vector(table(str))
total <- sum(counts)
p <- counts/total
p <- p^2
return( 1 - sum(p))
}
e.h.str <- apply(data, 2, expected.hetereozygozity.str)
hist(e.h.str, main="Histogram of the expected heterozygosity over all STRs", xlab='Expected heterozygosity', ylab="Frequency")
mean(e.h.str)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
data <- read.csv("FrenchSTRs.dat", sep= " ")
dim(data)
N <- length(unique(data$Individual))
N
p <- ncol(data)-1
p
data <- data[,2:(p+1)]
missings <- sum(data == -9)
percentage.missings <- missings/(2*N*p) * 100
percentage.missings
### This funcion will return the number of alleles for a STR
n.alleles.str <- function(str){
n.alleles <- length(unique(str[!is.na(str)]))
return(n.alleles)
}
n.alleles <- apply(data, 2, n.alleles.str)
(mean.alleles <- mean(n.alleles))
(std.alleles <- sd(n.alleles))
(median.alleles <- median(n.alleles))
(min.alleles <- min(n.alleles))
(max.alleles <- max(n.alleles))
barplot(table(n.alleles), main='Number of STRs for each number of alleles', xlab="Number of alleles", ylab="Number of STRs")
### Function for computing the expected heterozygosity for a given STR
expected.hetereozygozity.str <- function(str){
counts <- as.vector(table(str))
total <- sum(counts)
p <- counts/total
p <- p^2
return( 1 - sum(p))
}
e.h.str <- apply(data, 2, expected.hetereozygozity.str)
hist(e.h.str, main="Histogram of the expected heterozygosity over all STRs", xlab='Expected heterozygosity', ylab="Frequency")
mean(e.h.str)
barplot(table(n.alleles), main='Number of STRs for each number of alleles',
xlab="Number of alleles", ylab="Number of STRs")
### Function for computing the expected heterozygosity for a given STR
expected.hetereozygozity.str <- function(str){
counts <- as.vector(table(str))
total <- sum(counts)
p <- counts/total
p <- p^2
return( 1 - sum(p))
}
e.h.str <- apply(data, 2, expected.hetereozygozity.str)
hist(e.h.str, main="Histogram of the expected heterozygosity over all STRs",
xlab='Expected heterozygosity', ylab="Frequency")
