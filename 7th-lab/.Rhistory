data <- read.delim("CHD.raw", header = TRUE, sep=" ")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/7th-lab")
data <- read.delim("CHD.raw", header = TRUE, sep=" ")
data <- read.delim("CHD.raw", header = TRUE, sep=" ")
data <- read.delim("CHD.raw", header = TRUE, sep=" ")
#The family relationship is documented in the variables 1,3 and 4 which are respectively the family id, the paternal id
#and the maternal id (there are also other variables that are not genetic variants are the individual id, sex and phenotype):
colnames(data)[1]
colnames(data)[3]
colnames(data)[4]
#However, in this dataset this information is not stored, because we can see both Paternal ids and maternal ids are empty:
data[3]
data[4]
#4. (2p) Compute the Manhattan distance between the inviduals on the basis of the genetic data. Use
# classical metric multidimensional scaling to obtain a map of the indivuals. Are the data homogeneous?
# Identify possible outliers.
ncols <- ncol(data)
nrows <- nrow(data)
manhattanDist <- as.matrix(dist(data[,7:ncols],method = "manhattan"))
muliDimScaling <- cmdscale(manhattanDist,k=nrows-1,eig=TRUE)
#Map of the individuals:
X <- muliDimScaling$points
plot(X[,2],X[,1], xlab="First principal axis", ylab="Second principal axis", main="Map of the individuals",asp=1)
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
MeanMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
SdMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
genData <- data[,7:ncols]
for(i in 1:nrows) {
for(j in i:nrows) {
MeanMatrix[i,j] <- ibs.mean(genData[i,],genData[j,])
SdMatrix[i,j] <- ibs.sd(genData[i,],genData[j,])
}
}
data <- read.delim("CHD.raw", header = TRUE, sep=" ")
#The family relationship is documented in the variables 1,3 and 4 which are respectively the family id, the paternal id
#and the maternal id (there are also other variables that are not genetic variants are the individual id, sex and phenotype):
colnames(data)[1]
colnames(data)[3]
colnames(data)[4]
#However, in this dataset this information is not stored, because we can see both Paternal ids and maternal ids are empty:
data[3]
data[4]
#4. (2p) Compute the Manhattan distance between the inviduals on the basis of the genetic data. Use
# classical metric multidimensional scaling to obtain a map of the indivuals. Are the data homogeneous?
# Identify possible outliers.
ncols <- ncol(data)
nrows <- nrow(data)
manhattanDist <- as.matrix(dist(data[,7:ncols],method = "manhattan"))
muliDimScaling <- cmdscale(manhattanDist,k=nrows-1,eig=TRUE)
#Map of the individuals:
X <- muliDimScaling$points
plot(X[,2],X[,1], xlab="First principal axis", ylab="Second principal axis", main="Map of the individuals",asp=1)
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
MeanMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
SdMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
famData <- as.matrix(data[,1:6])
genData <- as.matrix(data[,7:ncols])
for(i in 1:nrows) {
for(j in 1:nrows) {
MeanMatrix[i,j] <- ibs.mean(genData[i,],genData[j,])
SdMatrix[i,j] <- ibs.sd(genData[i,],genData[j,])
}
}
lowerTriMeanMatrix <- MeanMatrix[lower.tri(MeanMatrix)]
lowerTriSdMatrix <- SdMatrix[lower.tri(SdMatrix)]
# Plot of the standard deviation deviation against the mean:
plot(main="(m, s)", lowerTriMeanMatrix,lowerTriSdMatrix,xlab="Mean",ylab="Standard deviation")
ind1 = c()
ind2 = c()
for(i in 1:nrows) {
for(j in i:nrows) {
# The differentiated points have mean value greater than 1.35
if (MeanMatrix[i,j] != 2 && MeanMatrix[i,j] > 1.35) {
ind1 <- c(ind1,c(i))
ind2 <- c(ind2,c(j))
}
}
}
# The individuals that might have some kind of relationship are:
for(i in 1:length(ind1)) {
print("Between individuals: ")
print(famData[ind1[i],])
print(famData[ind2[i],])
}
stats <- function(x,y) {
aux <- 2-abs(x-y) # number of shared alleles
n0 <- sum(aux==0,na.rm=TRUE)
n1 <- sum(aux==1,na.rm=TRUE)
n2 <- sum(aux==2,na.rm=TRUE)
n <- sum(!is.na(aux))
p0 <- n0/n
p1 <- n1/n
p2 <- n2/n
y <- c(p0,p1,p2)
return(y)
}
Mp0 <- matrix(NA,nrow=nrows,ncol=nrows)
Mp1 <- matrix(NA,nrow=nrows,ncol=nrows)
Mp2 <- matrix(NA,nrow=nrows,ncol=nrows)
for(i in 1:nrows) {
for(j in 1:nrows) {
statsofapair <- stats(genData[i,],genData[j,])
Mp0[i,j] <- statsofapair[1]
Mp1[i,j] <- statsofapair[2]
Mp2[i,j] <- statsofapair[3]
}
}
p0vec <- Mp0[upper.tri(Mp0)]
p2vec <- Mp2[upper.tri(Mp2)]
plot(main="(p0, p2)", p0vec,p2vec,asp=1,
xlab="% variants 0 shared alleles",
ylab="% variants 2 shared alleles")
plot(main="(p0, p2)", jitter(p0vec,amount=.005),p2vec,xlim= c(0,0.15),
xlab="% variants 0 shared alleles",
ylab="% variants 2 shared alleles")
ind3 = c()
ind4 = c()
for(i in 1:nrows) {
for(j in i:nrows) {
# The differentiated points have value greater than 0.4
if (Mp2[i,j] != 1 && Mp2[i,j] > 0.4) {
ind3 <- c(ind3,c(i))
ind4 <- c(ind4,c(j))
}
}
}
# The individuals that might have some kind of relationship are:
for(i in 1:length(ind3)) {
print("Between individuals: ")
print(famData[ind3[i],])
print(famData[ind4[i],])
}
# To generate the .genome file we used the command line instruction: plink --bfile CHD --genome --genome-full --out CHD
genomeData <- read.table("CHD.genome",header=TRUE)
plot(main="(k0, k1)", genomeData$Z0,genomeData$Z1,asp=1,xlab=expression(k[0]),ylab=expression(k[1]))
plot(main="(k0, k1)", jitter(genomeData$Z0,amount=0.05),genomeData$Z1,asp=1,xlab=expression(k[0]),ylab=expression(k[1]))
tableMatrix <- matrix(NA,nrow=length(ind3),ncol=4)
for(i in 1:nrow(genomeData)) {
for (k in 1:length(ind3)) {
if (genomeData[i,][2] != genomeData[i,][4] && ((genomeData[i,][2] == famData[ind3[k],][2]) && (genomeData[i,][4] == famData[ind4[k],][2])
|| (genomeData[i,][2] == famData[ind4[k],][2]) && (genomeData[i,][4] == famData[ind3[k],][2]))
) {
tableMatrix[k,1] <- paste(famData[ind3[k],][2],famData[ind4[k],][2],sep=',')
tableMatrix[k,2] <- genomeData[i,7]
tableMatrix[k,3] <- genomeData[i,8]
tableMatrix[k,4] <- genomeData[i,9]
}
}
}
table <- data.table(tableMatrix)
library(data.table)
table <- data.table(tableMatrix)
setnames(table,c("Relations","Z0","Z1","Z2"))
table
# Reviewing the MDS map:
plot(X[,2],X[,1], xlab="First principal axis", ylab="Second principal axis", main="MDS map",asp=1)
data <- read.delim("CHD.raw", header = TRUE, sep=" ")
#The family relationship is documented in the variables 1,3 and 4 which are respectively the family id, the paternal id
#and the maternal id (there are also other variables that are not genetic variants are the individual id, sex and phenotype):
colnames(data)[1]
colnames(data)[1]
colnames(data)[3]
colnames(data)[4]
colnames(data)[1]
colnames(data)[3]
colnames(data)[4]
data[3]
data[4]
data[3]
data[4]
ncols <- ncol(data)
nrows <- nrow(data)
manhattanDist <- as.matrix(dist(data[,7:ncols],method = "manhattan"))
muliDimScaling <- cmdscale(manhattanDist,k=nrows-1,eig=TRUE)
ncols
nrows
X <- muliDimScaling$points
plot(X[,2],X[,1], xlab="First principal axis", ylab="Second principal axis", main="Map of the individuals",asp=1)
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
MeanMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
SdMatrix <- matrix(NA,nrow=nrows,ncol=nrows)
famData <- as.matrix(data[,1:6])
genData <- as.matrix(data[,7:ncols])
for(i in 1:nrows) {
for(j in 1:nrows) {
MeanMatrix[i,j] <- ibs.mean(genData[i,],genData[j,])
SdMatrix[i,j] <- ibs.sd(genData[i,],genData[j,])
}
}
lowerTriMeanMatrix <- MeanMatrix[lower.tri(MeanMatrix)]
lowerTriSdMatrix <- SdMatrix[lower.tri(SdMatrix)]
plot(main="(m, s)", lowerTriMeanMatrix,lowerTriSdMatrix,xlab="Mean",ylab="Standard deviation")
ind1 = c()
ind2 = c()
for(i in 1:nrows) {
for(j in i:nrows) {
# The differentiated points have mean value greater than 1.35
if (MeanMatrix[i,j] != 2 && MeanMatrix[i,j] > 1.35) {
ind1 <- c(ind1,c(i))
ind2 <- c(ind2,c(j))
}
}
}
for(i in 1:length(ind1)) {
print("Between individuals: ")
print(famData[ind1[i],])
print(famData[ind2[i],])
}
stats <- function(x,y) {
aux <- 2-abs(x-y) # number of shared alleles
n0 <- sum(aux==0,na.rm=TRUE)
n1 <- sum(aux==1,na.rm=TRUE)
n2 <- sum(aux==2,na.rm=TRUE)
n <- sum(!is.na(aux))
p0 <- n0/n
p1 <- n1/n
p2 <- n2/n
y <- c(p0,p1,p2)
return(y)
}
Mp0 <- matrix(NA,nrow=nrows,ncol=nrows)
Mp1 <- matrix(NA,nrow=nrows,ncol=nrows)
Mp2 <- matrix(NA,nrow=nrows,ncol=nrows)
for(i in 1:nrows) {
for(j in 1:nrows) {
statsofapair <- stats(genData[i,],genData[j,])
Mp0[i,j] <- statsofapair[1]
Mp1[i,j] <- statsofapair[2]
Mp2[i,j] <- statsofapair[3]
}
}
p0vec <- Mp0[upper.tri(Mp0)]
p2vec <- Mp2[upper.tri(Mp2)]
plot(main="(p0, p2)", p0vec,p2vec,asp=1,
xlab="% variants 0 shared alleles",
ylab="% variants 2 shared alleles")
plot(main="(p0, p2)", jitter(p0vec,amount=.005),p2vec,xlim= c(0,0.15),
xlab="% variants 0 shared alleles",
ylab="% variants 2 shared alleles")
ind3 = c()
ind4 = c()
for(i in 1:nrows) {
for(j in i:nrows) {
# The differentiated points have value greater than 0.4
if (Mp2[i,j] != 1 && Mp2[i,j] > 0.4) {
ind3 <- c(ind3,c(i))
ind4 <- c(ind4,c(j))
}
}
}
for(i in 1:length(ind3)) {
print("Between individuals: ")
print(famData[ind3[i],])
print(famData[ind4[i],])
}
genomeData <- read.table("CHD.genome",header=TRUE)
plot(main="(k0, k1)", genomeData$Z0,genomeData$Z1,asp=1,xlab=expression(k[0]),ylab=expression(k[1]))
plot(main="(k0, k1)", jitter(genomeData$Z0,amount=0.05),genomeData$Z1,asp=1,xlab=expression(k[0]),ylab=expression(k[1]))
tableMatrix <- matrix(NA,nrow=length(ind3),ncol=4)
for(i in 1:nrow(genomeData)) {
for (k in 1:length(ind3)) {
if (genomeData[i,][2] != genomeData[i,][4] && ((genomeData[i,][2] == famData[ind3[k],][2]) && (genomeData[i,][4] == famData[ind4[k],][2])
|| (genomeData[i,][2] == famData[ind4[k],][2]) && (genomeData[i,][4] == famData[ind3[k],][2]))
) {
tableMatrix[k,1] <- paste(famData[ind3[k],][2],famData[ind4[k],][2],sep=',')
tableMatrix[k,2] <- genomeData[i,7]
tableMatrix[k,3] <- genomeData[i,8]
tableMatrix[k,4] <- genomeData[i,9]
}
}
}
library(data.table)
table <- data.table(tableMatrix)
setnames(table,c("Relations","Z0","Z1","Z2"))
table
plot(X[,2],X[,1], xlab="First principal axis", ylab="Second principal axis", main="MDS map",asp=1)
