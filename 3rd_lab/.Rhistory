setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/3rd_lab")
install.packages("genetics")
install.packages("HardyWeinberg")
install.packages("snpStats")
install.packages("LDheatmap")
library(genetics)
library(genetics)
library(HardyWeinberg)
library(HardyWeinberg)
library(LDheatmap)
library(LDheatmap)
data <- read.delim("FOXP2.dat", header = TRUE, row.names = 1, sep=" ")
data <- read.delim("FOXP2/FOXP2.dat", header = TRUE, row.names = 1, sep=" ")
removeSlashes <- function(x) {
gsub("/", "", x, fixed=TRUE)
}
data <- as.data.frame(apply(data, c(1,2), removeSlashes))
nrows <- nrow(data)
ncols <- ncol(data)
percentageMissing <- 100*sum(is.na(data))/(nrows*ncols)
percentageMissing
nrows
ncols
bimData <- read.delim("FOXP2.bim", header = FALSE, sep="\t")
bimData <- read.delim("FOXP2.bim", header = FALSE, sep="\t")
bimData <- read.delim("FOXP2/FOXP2.bim", header = FALSE, sep="\t")
alleles <- c(do.call(paste,c(bimData[c("V5", "V6")],sep="/")))
counts <- MakeCounts(data, alleles)
counts <- counts[,1:3]
results.chi <- apply(counts,1,HWChisq, verbose=FALSE, cc=0)
filterReject <- function(x) {
if (x$pval > 0.05) {
return(x)
}
}
filtered <- lapply(results.chi,filterReject)
filterNull <- function(x) {
vector = c()
for (i in 1:length(x)) {
if (is.null(x[[i]])) {
vector <- c(vector, i)
}
}
return(vector)
}
nullsIndex <- filterNull(filtered)
length(nullsIndex)
datars34684677 <- data$rs34684677
datars2894715 <- data$rs2894715
gtrs34684677 <- genotype(datars34684677,sep="")
gtrs2894715 <- genotype(datars2894715,sep="")
ldQ4 <- LD(gtrs34684677,gtrs2894715)
ldQ4$D
ldQ4$`D'`
ldQ4$`P-value`
ldQ4$D
ldQ4$`D'`
ldQ4$`P-value`
datars998302 <- data$rs998302
gtrs998302 <- genotype(datars998302,sep="")
ldQ5 <- LD(gtrs34684677,gtrs998302)
ldQ5$D
alleleFreq1 <- summary(gtrs34684677)
allele.freq[,1]
summary(gtrs2894715)
allele.freq1[,1]
summary(gtrs2894715)
pA <- summary(gtrs34684677)$allele.freq[,2][1]
pB <- summary(gtrs2894715)$allele.freq[,2][1]
pa <- summary(gtrs34684677)$allele.freq[,2][2]
pb <- summary(gtrs2894715)$allele.freq[,2][2]
halotypeAB <- ldQ4$D + pA * pB
halotypeab <- ldQ4$D + pa * pb
halotypeAB
halotypeAB
halotypeab
buildMatrix <- function(x){
m <- matrix(nrow = ncol(x), ncol = ncol(x))
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
return(m)
}
rld <- buildMatrix(data)
dataInfo <- read.bed("FOXP2/FOXP2.bed", "FOXP2/FOXP2.bim", "FOXP2/FOXP2.fam")
install.packages("genetics")
install.packages("HardyWeinberg")
install.packages("snpStats")
install.packages("LDheatmap")
library(genetics)
library(HardyWeinberg)
library(HardyWeinberg)
library(LDheatmap)
dataInfo <- read.bed("FOXP2/FOXP2.bed", "FOXP2/FOXP2.bim", "FOXP2/FOXP2.fam")
install.packages("SCAT")
library(SCAT)
dataInfo <- read.bed("FOXP2/FOXP2.bed", "FOXP2/FOXP2.bim", "FOXP2/FOXP2.fam")
snpInfo <- dataInfo$snp.info[, c(2,5,6)]
snpInfo$alleles <- paste0(as.character(snpInfo$allele1), '/', as.character(snpInfo$allele2))
allelesVector <- snpInfo$alleles
temp <- as.data.frame(lapply(dataset, function(y) gsub("/", "", y)))
temp <- as.data.frame(lapply(data, function(y) gsub("/", "", y)))
counts <- MakeCounts(temp, as.vector(allelesVector))
allelesVector <- snpInfo$alleles
temp <- as.data.frame(lapply(data, function(y) gsub("/", "", y)))
counts <- MakeCounts(temp, as.vector(allelesVector))
counts <- MakeCounts(as.vector(allelesVector))
temp <- as.data.frame(lapply(data, function(y) gsub("/", "", y)))
temp
install.packages("HardyWeinberg")
counts <- MakeCounts(temp, as.vector(allelesVector))
install.packages("HardyWeinberg")
library(HardyWeinberg)
counts <- MakeCounts(temp, as.vector(allelesVector))
counts <- MakeCounts(temp, allelesVector)
bimData <- read.delim("FOXP2/FOXP2.bim", header = FALSE, sep="\t")
alleles <- c(do.call(paste,c(bimData[c("V5", "V6")],sep="/")))
counts <- MakeCounts(data, alleles)
counts[1:10, 1:3]
HWTernaryPlot(counts[, 1:3])
test <- HWChisqStats(counts[, 1:3], pvalues=T)
significant <- test[test < 0.05]
print(paste0("Variants for which we reject equilibrium: ", length(significant)))
counts[1:10, 1:3]
print(paste0("p(AA): ", round(sum(counts[, 1])/sum(counts), 3), "%"))
print(paste0("p(AB): ", round(sum(counts[, 2])/sum(counts), 3), "%"))
print(paste0("p(BB): ", round(sum(counts[, 3])/sum(counts), 3), "%"))
filterReject <- function(x) {
if (x$pval > 0.05) {
return(x)
}
}
filtered <- lapply(results.chi,filterReject)
filterNull <- function(x) {
vector = c()
for (i in 1:length(x)) {
if (is.null(x[[i]])) {
vector <- c(vector, i)
}
}
return(vector)
}
nullsIndex <- filterNull(filtered)
length(nullsIndex)
filterReject <- function(x) {
if (x$pval > 0.05) {
return(x)
}
}
filtered <- lapply(results.chi,filterReject)
filterNull <- function(x) {
vector = c()
for (i in 1:length(x)) {
if (is.null(x[[i]])) {
vector <- c(vector, i)
}
}
return(vector)
}
nullsIndex <- filterNull(filtered)
length(nullsIndex)
res <- data.frame(genotype(dataset[, 1], sep = "/"))
install.packages("genetics")
install.packages("genetics")
install.packages("HardyWeinberg")
library(genetics)
res <- data.frame(genotype(dataset[, 1], sep = "/"))
res <- data.frame(genotype(data[, 1], sep = "/"))
res <- data.frame(genotype(data[, 1], sep = "/"))
for(i in 2 : ncol(dataset)) {
snp <- genotype(dataset[, i], sep = "/")
res <- cbind(res, snp)
}
for(i in 2 : ncol(data)) {
snp <- genotype(data[, i], sep = "/")
res <- cbind(res, snp)
}
r2s <- LD(res)
for(i in 2 : ncol(data)) {
snp <- genotype(data[, i], sep = "/")
res <- cbind(res, snp)
}
res <- data.frame(genotype(data[, 1], sep = "/"))
buildMatrix <- function(x){
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
return(m)
buildMatrix <- function(x){
m <- matrix(nrow = ncol(x), ncol = ncol(x))
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
return(m)
}
positions <- dataInfo$snp.info[["position"]]
distances <- dist(positions)
plot(test.r2.2[upper.tri(test.r2.2)], distances, pch = 3, col = "grey", xlab = "R2", ylab = "Distances")
positions <- dataInfo$snp.info[["position"]]
distances <- dist(positions)
plot(test.r2.2[upper.tri(test.r2.2)], distances, pch = 3, col = "grey", xlab = "R2", ylab = "Distances")
positions <- dataInfo$snp.info[["position"]]
distances <- dist(positions)
plot(test.r2.2[upper.tri(test.r2.2)], distances, pch = 3, col = "grey", xlab = "R2", ylab = "Distances")
segments(0, 300000, 1, 0, lwd = 2, lty = 2)
LDheatmap(res, LDmeasure="r")
install.packages("LDheatmap")
library(LDheatmap)
library(LDheatmap)
LDheatmap(res, LDmeasure="r")
res <- data.frame(genotype(data[, 1], sep = "/"))
dataset <- data[2:length(data)]
res <- data.frame(genotype(dataset[, 1], sep = "/"))
dataset <- read.table("FOXP2/FOXP2.dat", header = T)
dataset <- dataset[2:length(dataset)]
res <- data.frame(genotype(dataset[, 1], sep = "/"))
for(i in 2 : ncol(dataset)) {
snp <- genotype(dataset[, i], sep = "/")
res <- cbind(res, snp)
}
r2s <- LD(res)
#r2s <- LD(res)
#test.r2 <- r2s$"R^2"
ld <- read.table("FOXP2/FOXP2.ld")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/3rd_lab")
bimData <- read.delim("FOXP2/FOXP2.bim", header = FALSE, sep="\t")
#r2s <- LD(res)
#test.r2 <- r2s$"R^2"
ld <- read.table("FOXP2/FOXP2.ld")
test.r2.2 <- matrix(nrow = ncol(dataset), ncol = ncol(dataset))
for (i in 1:ncol(dataset)) {
for (j in i:ncol(dataset)) {
test.r2.2[i, j] = test.r2[i,j]
test.r2.2[j, i] = test.r2[i,j]
if (i == j) {
test.r2.2[i, j] = 1
}
}
}
r2s <- LD(res)
test.r2 <- r2s$"R^2"
ld <- read.table("FOXP2/FOXP2.ld")
setwd("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/3rd_lab")
ld <- read.table("FOXP2/FOXP2.ld")
ld <- read.table("FOXP2/FOXP2.ld")
test.r2.2 <- matrix(nrow = ncol(dataset), ncol = ncol(dataset))
for (i in 1:ncol(dataset)) {
for (j in i:ncol(dataset)) {
test.r2.2[i, j] = test.r2[i,j]
test.r2.2[j, i] = test.r2[i,j]
if (i == j) {
test.r2.2[i, j] = 1
}
}
}
plink.matrix <- matrix(nrow = ncol(dataset), ncol = ncol(dataset))
for (i in 1:ncol(dataset)) {
for (j in i:ncol(dataset)) {
plink.matrix[i, j] = ld[i][j,1]
plink.matrix[j, i] = ld[i][j,1]
}
}
plink.matrix <- matrix(nrow = ncol(dataset), ncol = ncol(dataset))
for (i in 1:ncol(dataset)) {
for (j in i:ncol(dataset)) {
gt1 <- genotype(dataset[,i],sep="")
gt2 <- genotype(dataset[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
vector.r2 <- as.vector(test.r2.2)
vector.r2[1:10]
vector.plink <- as.vector(plink.matrix)
vector.plink[1:10]
dataframe.r2 <- data.frame(vector.r2, vector.plink)
names(dataframe.r2) <- c("R^2 - LD", "R^2 - PLINK")
dataframe.r2$difference <- dataframe.r2$`R^2 - LD` - dataframe.r2$`R^2 - PLINK`
val <- vector.r2 + vector.plink
valcol <- (val + abs(min(val)))/max(val + abs(min(val)))
plot(vector.r2, vector.plink, xlab = "R^2 - LD function", ylab = "R^2 - PLINK", col = rgb(0, 0, valcol))
plot(vector.r2, vector.plink, xlab = "R^2 - LD function", ylab = "R^2 - PLINK", col = rgb(0, 0, valcol)
plot(vector.r2, vector.plink, xlab = "R^2 - LD function", ylab = "R^2 - PLINK", col = rgb(0, 0, valcol))
plot(vector.r2, vector.plink, xlab = "R^2 - LD function", ylab = "R^2 - PLINK", col = rgb(0, 0, valcol))
positions <- dataInfo$snp.info[["position"]]
distances <- dist(positions)
plot(test.r2.2[upper.tri(test.r2.2)], distances, pch = 3, col = "grey", xlab = "R2", ylab = "Distances")
segments(0, 300000, 1, 0, lwd = 2, lty = 2)
library(LDheatmap)
LDheatmap(res, LDmeasure="r")
mafCount <- function(x) {
sumInfo <- summary(genotype(x))
minPercentCount <- min(sumInfo$allele.freq[, 2])
return(minPercentCount*100)
}
mafVector <- apply(dataset, 2, mafCount)
mafVector <- apply(dataset, 2, mafCount)
res.maf <- res[mafVector > 35]
LDheatmap(res.maf, LDmeasure="r")
dataset[1:10, 1:10]
nrow(dataset)
dataset.sampled <- data.frame(matrix(ncol = ncol(dataset), nrow = nrow(dataset)))
for (i in 1:ncol(dataset)) {
column <- dataset[,i]
column.geno <- summary(genotype(column))
allele.frequency <- column.geno$allele.freq[,2]
q <- 0
p <- allele.frequency[1]
if (length(allele.frequency) > 1) {
q <- allele.frequency[2]
}
dataset.sampled[,i] <- sample(c("A/A","A/B","B/B"), nrow(dataset), replace = TRUE, prob = c(p*p,2*p*q,q*q))
}
dataset.sampled[1:10,1:10]
res.sampled <- data.frame(genotype(dataset.sampled[, 1], sep = "/"))
for(i in 2 : ncol(dataset.sampled)) {
snp <- genotype(dataset.sampled[, i], sep = "/")
res.sampled <- cbind(res.sampled, snp)
}
LDheatmap(res.sampled, LDmeasure="r")
plink.matrix <- matrix(nrow = ncol(dataset), ncol = ncol(dataset))
for (i in 1:ncol(dataset)) {
for (j in i:ncol(dataset)) {
gt1 <- genotype(dataset[,i],sep="")
gt2 <- genotype(dataset[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
buildMatrix <- function(x){
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
buildMatrix <- function(x){
m <- matrix(nrow = ncol(x), ncol = ncol(x))
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
return(m)
}
vector.r2 <- as.vector(test.r2.2)
vector.r2[1:10]
buildMatrix <- function(x){
m <- matrix(nrow = ncol(x), ncol = ncol(x))
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
gt1 <- genotype(data[,i],sep="")
gt2 <- genotype(data[,j],sep="")
m[i,j] <- LD(gt1,gt2)$`D'`
}
}
return(m)
}
vector.r2 <- as.vector(test.r2.2)
vector.r2[1:10]
dataframe.r2 <- data.frame(vector.r2, vector.plink)
names(dataframe.r2) <- c("R^2 - LD", "R^2 - PLINK")
dataframe.r2$difference <- dataframe.r2$`R^2 - LD` - dataframe.r2$`R^2 - PLINK`
val <- vector.r2 + vector.plink
valcol <- (val + abs(min(val)))/max(val + abs(min(val)))
plot(vector.r2, vector.plink, xlab = "R^2 - LD function", ylab = "R^2 - PLINK", col = rgb(0, 0, valcol))
filterReject <- function(x) {
if (x$pval > 0.05) {
return(x)
}
}
filtered <- lapply(results.chi,filterReject)
results.chi <- apply(counts,1,HWChisq, verbose=FALSE, cc=0)
filterNull <- function(x) {
vector = c()
for (i in 1:length(x)) {
if (is.null(x[[i]])) {
vector <- c(vector, i)
}
}
return(vector)
}
nullsIndex <- filterNull(filtered)
length(nullsIndex)
test <- HWChisqStats(counts[, 1:3], pvalues=T)
significant <- test[test < 0.05]
print(paste0("Variants for which we reject equilibrium: ", length(significant)))
dataframe.r2 <- data.frame(vector.r2, vector.plink)
names(dataframe.r2) <- c("R^2 - LD", "R^2 - PLINK")
dataframe.r2$difference <- dataframe.r2$`R^2 - LD` - dataframe.r2$`R^2 - PLINK`
