install.packages("data.table") # Install package data.table for having fread function ready to use.
install.packages("data.table") # Install package data.table for having fread function ready to use.
library("data.table")
library("data.table")
#install.packages("data.table") # Install package data.table for having fread function ready to use.
#library("data.table")
#data <- fread(file= "TSIChr22v4.raw", header = TRUE)
#data <- data[,7:ncol(data)] #remove the first 6 columns
#saveRDS(data, file="TSIChr22v4_preprocess")
chr22 <- readRDS("TSIChr22v4_preprocess")
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
number.of.variants <- ncol(chr22)
number.of.variants
number.of.individuals <- nrow(chr22)
number.of.individuals
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
library("CRAN")
signfunction <- readRDS("monomorphicVar")
number.of.monomorphic <-length(signfunction)#number of monomorphic variants
print(100*length(signfunction)/(number.of.variants))
print(number.of.variants-length(flag))
print(number.of.variants-length(signfunction))
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
#poly.data <- subset(chr22, select = -signfunction) #remove the monomorphic variants from data
#poly.data[poly.data==0] <- "AA"
#poly.data[poly.data==1] <- "AB"
#poly.data[poly.data==2] <- "BB"
#saveRDS(poly.data, file= "poly.data")
poly.data <- readRDS("poly.data")
install.packages("genetics")
library(genetics)
library(genetics)
#install.packages("genetics")
#library(genetics)
rs <- poly.data$rs587756191_T
results <- genotype(rs,sep="")
out <- summary(results)
out$genotype.freq #genotype counts
install.packages("'HardyWeinberg")
library(HardyWeinberg)
library(HardyWeinberg)
data <- c(summary(results)$genotype[1,1],summary(results)$genotype[2,1], 0)
names(data) <- c("AA", "AB", "BB")
results.chi.cc <- HWChisq(data) #with continuity correction
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
results.exact <- HWExact(data)
#results.perm <- HWPerm(data)
results.perm <- HWPerm(data)
results.all <- HWAlltests(data,include.permutation.test=TRUE)
getGenotype<- function(x) {
test <- summary(genotype(x,sep=""))
set <- (test$genotype.freq[,1])
name <- rownames(test$genotype.freq)
name <- gsub("/","",name)
if (length(name) == 3){
return(c(set[1],set[2],set[3]))
}else {
if (name[1] == "AA" && name[2] == "AB"){
return(c(set[1],set[2],0))
} else if (name[1] == "AB" && name[2] == "BB"){
return(c(0,set[1],set[2]))
}else{
return(c(set[1],0,set[2]))
}
}
}
#matrax <- apply(poly.data, 2, getGenotype)
#matrax <- t(matrax) #px3
#colnames(matrax) <- c("AA", "AB", "BB")
#saveRDS(matrax, file="matrax")
matrax <- readRDS("matrax")
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
chisq.stats <- HWChisqStats(matrax, pvalues=TRUE)
print(length(chisq.stats[chisq.stats <= 0.05]) )
print(length(chisq.stats[chisq.stats > 0.05]))
print(length(chisq.stats[chisq.stats ==min(chisq.stats)]) )
unique(matrax[chisq.stats ==min(chisq.stats),] )
exact.stats <- HWExactStats(matrax)
print(length(exact.stats[exact.stats <= 0.05]))
matrax[exact.stats ==min(exact.stats),,drop=F]
unique.matrax <- UniqueGenotypeCounts(matrax)
HWTernaryPlot(unique.matrax[,1:3])
hist(chisq.stats)
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
qqnorm(chisq.stats, pch = 1, frame = FALSE)
qqline(chisq.stats, col = "steelblue", lwd = 2)
qqnorm(chisq.stats, pch = 1, frame = FALSE)
qqline(chisq.stats, col = "steelblue", lwd = 2)
qqnorm(chisq.stats, pch = 1, frame = FALSE)
inbreeding.coff <- apply(matrax,1,function(x) HWf(x))
saveRDS(inbreeding.coff, file="inbreCoff")
inbreeding.coff <- readRDS("inbreCoff")
hist(inbreeding.coff)
save.image("D:/Spain-Barcelona/UPC/4th Semester/BSG/Statistic-part/2nd_lab/project-lab/env.RData")
print(mean(inbreeding.coff))
print(sd(inbreeding.coff))
print(median(inbreeding.coff))
print(min(inbreeding.coff))
print(max(inbreeding.coff))
probplot(inbreeding.coff)
plot(inbreeding.coff)
plot(inbreeding.coff,chisq.stats)
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
prettyPrint(paste("with alpha",x, sep=" "),lenA),
prettyPrintPerc(paste("alpha",x, sep=" "), lenA/lenN*100) ))
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(paste("with alpha",x, sep=" "),lenA),
print(paste("alpha",x, sep=" "), lenA/lenN*100) ))
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(paste(x, sep=" "),lenA),
print(paste(x, sep=" "), lenA/lenN*100) ))
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(x, sep=" "),lenA),
print(x, sep=" "), lenA/lenN*100)
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(x),lenA),
print(x), lenA/lenN*100)
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
exact.signi <- function(x){
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(x),lenA),
print(x), lenA/lenN*100)
}
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(x),lenA),
(print(x), lenA/lenN*100))
exact.signi <- function(x){
lenN <- length(exact.stats)
lenA <- length(exact.stats[exact.stats <= x])
return(c(
print(x),lenA))
}
alphas <- c(0.10, 0.05, 0.01, 0.001)
lapply(alphas, exact.signi)
#install.packages("genetics")
library(genetics)
rs <- poly.data$rs587756191_T
results <- genotype(rs,sep="")
out <- summary(results)
out$genotype.freq #genotype counts
results.exact <- HWExact(data)
